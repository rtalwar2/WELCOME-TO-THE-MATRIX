@startuml
autonumber

actor Gebruiker
participant MainProgram
participant TutorialPage
participant Tutorial
participant VermenigvuldigTutorial
participant OefeningPage
participant Oefeningen
participant VermenigvuldigOefening
participant Bitcoins
participant Matrix
participant Speler
participant localStorage




== Startup Program ==

Gebruiker ->  MainProgram: Open Main
activate MainProgram

MainProgram -> MainProgram: init()


== HTML goed genereren ==

MainProgram -> MainProgram: haalKnoppen()

MainProgram -> TutorialPage: TutorialPage.alle_beschrijvingen
activate TutorialPage
TutorialPage-->>MainProgram: returns alle_beschrijvingen

MainProgram -> OefeningPage: OefeningPage.alle_oefeningen
activate OefeningPage
OefeningPage-->>MainProgram: returns alle_oefeningen

MainProgram -->> MainProgram: generate html page



== Speler ==

MainProgram -> localStorage: getItem("huidige speler")
localStorage -->> MainProgram: huidige speler

opt speler bestaat niet
    MainProgram -> MainProgram: vraagNaam()

    MainProgram -> Gebruiker: prompt(naam?)
    Gebruiker -->> MainProgram: naam

    MainProgram -> MainProgram: spelerMaken(naam)

    else speler bestaat
    MainProgram -> MainProgram: spelerMaken(huidige speler)
end

MainProgram -> Speler: Speler(naam)
activate Speler

Speler -> localStorage: getItem(naam)
activate localStorage
localStorage -->> Speler: data over speler
Speler -> Speler: saveData()
Speler -> localStorage: setItem(naam, data)
Speler -> localStorage: setItem("huidige speler", naam)

MainProgram -> Speler: getData()
Speler -->> MainProgram: Map<String,boolean>



== Kies Deelsysteem ==

Gebruiker -> MainProgram: Kiest Deelsysteem

MainProgram -> MainProgram: ListenToKnop(event)
MainProgram -> localStorage: setItem("selected_button", naam deelsysteem)


opt  if deelsysteem is een Tutorial
        MainProgram -> TutorialPage: open TutorialPage
        TutorialPage -->> TutorialPage: generate html page (stap **)
     else if deelsysteem is een Oefening
        MainProgram -> OefeningPage: open OefeningPage
        OefeningPage -->> OefeningPage: generate html page (stap **)
     else if deelsysteem is Bitcoins
        MainProgram -> Bitcoins: open Bitcoins
        Bitcoins -->> Bitcoins: generate html page (stap **)
     else if deelsysteem is Zombies
        MainProgram -> Zombies: open Zombies
        Zombies -->> Zombies: generate html page (stap **)
end
deactivate MainProgram



== Tutorials  ==
deactivate OefeningPage

TutorialPage -> TutorialPage: init()

TutorialPage -> localStorage: getItem("selected_button")
localStorage -->> TutorialPage: naam deelsysteem

TutorialPage -> TutorialPage: startTutorial(naam deelsysteem, 0)

opt  if deelsysteem is VermenigvuldigTutorial
        loop subtutorial
            TutorialPage -> Matrix: new Matrix(3, 3)
            activate Matrix
            TutorialPage -> Matrix: new Matrix(3, 3)

            TutorialPage -> VermenigvuldigTutorial: new VermenigvuldigTutorial(Matrix1, Matrix2)
            activate VermenigvuldigTutorial

            VermenigvuldigTutorial -> Tutorial: constructor()
            activate Tutorial
            Tutorial -->> VermenigvuldigTutorial: constructor

            VermenigvuldigTutorial -> Matrix: new Matrix(.,.,"0")

            TutorialPage -> VermenigvuldigTutorial: drawMatrices(tutorialPage)

            loop foreach tutorial.matrices[i]
                    TutorialPage -> VermenigvuldigTutorial: matrices[i]
                    VermenigvuldigTutorial -> Tutorial: matrices[i]
                    Tutorial -->> VermenigvuldigTutorial: matrices[i]
                    VermenigvuldigTutorial -->> TutorialPage: matrices[i]

                    TutorialPage -> Matrix: drawMatrix(.,.)
            end
            TutorialPage -> Matrix: drawMatrix(.,.)

            TutorialPage -> TutorialPage: showDescription()
            TutorialPage -> localStorage: getItem("selected_button")
            localStorage -->> TutorialPage: naam deelsysteem
            TutorialPage -> localStorage: getItem("selected_button")
            localStorage -->> TutorialPage: naam deelsysteem

            loop while niet laatste stap
                opt nextStep
                    Gebruiker -> TutorialPage: klik op next

                    TutorialPage -> TutorialPage: ListenToKnop(event)
                    TutorialPage -> TutorialPage: changeStep()

                    TutorialPage -> VermenigvuldigTutorial: refresh(tutorialPage)
                    VermenigvuldigTutorial -->> TutorialPage: {finished:., data:., tekst:.}

                    TutorialPage -> Matrix: drawMatrix(.,.)
                    TutorialPage -> TutorialPage: updateBeschrijving(.)
                end
                opt exit
                   Gebruiker -> TutorialPage: klik op exit

                   TutorialPage -> TutorialPage: terug()

                   TutorialPage -> localStorage: getItem("huidige speler")
                   localStorage -->> TutorialPage: huidige speler

                   TutorialPage -> Speler: new Speler(spelernaam)

                   Speler -> localStorage: getItem(naam)
                   localStorage -->> Speler: data over speler
                   Speler -> localStorage: setItem("huidige speler", naam)

                   TutorialPage -> localStorage: getItem("selected_button")
                   localStorage -->> TutorialPage: naam deelsysteem

                   TutorialPage -> Speler: eindTutorialOefening(naam deelsysteem)
                   Speler -> Speler: saveData()
                   Speler -> localStorage: setItem(naam, data)

                   TutorialPage -> MainProgram: open Main (stap 2)
                   activate MainProgram
                   deactivate MainProgram
                end
            end

            TutorialPage -> localStorage: getItem("selected_button")
            localStorage -->> TutorialPage: naam deelsysteem

            TutorialPage -> TutorialPage: nextTutorial()
        end
end
TutorialPage -> TutorialPage: endTutorial()

TutorialPage -> localStorage: getItem("selected_button")
localStorage -->> TutorialPage: naam deelsysteem

TutorialPage -> localStorage: getItem("huidige speler")
localStorage -->> TutorialPage: huidige speler

TutorialPage -> Speler: new Speler(spelernaam)

Speler -> localStorage: getItem(naam)
localStorage -->> Speler: data over speler
Speler -> localStorage: setItem("huidige speler", naam)

TutorialPage -> localStorage: getItem("selected_button")
localStorage -->> TutorialPage: naam deelsysteem

TutorialPage -> Speler: eindTutorialOefening(naam deelsysteem)
Speler -> Speler: saveData()
Speler -> localStorage: setItem(naam, data)

TutorialPage -> localStorage: getItem("selected_button")
localStorage -->> TutorialPage: naam deelsysteem

== Koppeling naar andere pagina ==


opt gebruiker kiest voor oefening
        Gebruiker -> TutorialPage: klikt op oefening
        TutorialPage -> OefeningPage: open OefeningPage (stap 97)
        activate OefeningPage
   else  gebruiker kiest mainPage
       Gebruiker -> TutorialPage: klikt op Main
       TutorialPage -> MainProgram: open Main (stap 2)
       activate MainProgram
end

deactivate MainProgram
deactivate TutorialPage
deactivate Tutorial
deactivate VermenigvuldigTutorial







== Oefeningen ==

OefeningPage -> OefeningPage: init()
OefeningPage -> OefeningPage: new OefeningPage()

OefeningPage -> localStorage: getItem("selected_button")
localStorage -->> OefeningPage: naam deelsysteem

OefeningPage -> OefeningPage: startOefening(naam deelsysteem)
opt if deelsysteem is VermenigvuldigOefening
    OefeningPage -> Matrix: new Matrix(3, 3)
    OefeningPage -> Matrix: new Matrix(3, 3)

    OefeningPage -> VermenigvuldigOefening: new VermenigvuldigOefening(Matrix1, Matrix2)
    activate VermenigvuldigOefening

    VermenigvuldigOefening -> Oefeningen: constructor()
    activate Oefeningen
    Oefeningen -->> VermenigvuldigOefening: constructor

'    VermenigvuldigOefening -> Matrix: new Matrix(.,.,"0")
    VermenigvuldigOefening -> Matrix: vermenigvuldigMatrix(.)

    OefeningPage -> VermenigvuldigOefening: maakInvul()
    VermenigvuldigOefening -> VermenigvuldigOefening: changeInvul()

    loop foreach oefening.matrices[i]
        OefeningPage -> VermenigvuldigOefening: matrices[i]
        VermenigvuldigOefening -> Oefeningen: matrices[i]
        Oefeningen -->> VermenigvuldigOefening: matrices[i]
        VermenigvuldigOefening -->> OefeningPage: matrices[i]

        OefeningPage -> Matrix: drawMatrix(.)
    end

    opt check
       Gebruiker -> OefeningPage: klikt op Check
       OefeningPage ->  VermenigvuldigOefening: checkOplossing(.)

       VermenigvuldigOefening -> VermenigvuldigOefening: getMatrix()
       VermenigvuldigOefening -> Matrix: new Matrix(.,.)
       VermenigvuldigOefening -> VermenigvuldigOefening: correct(.)
       opt als juist
            VermenigvuldigOefening -> Gebruiker: alert("goed")
            else als fout
            VermenigvuldigOefening -> Gebruiker: alert("slecht")
       end

    end
    opt exit
       Gebruiker -> OefeningPage: klik op exit

       OefeningPage -> OefeningPage: terug()

       OefeningPage -> localStorage: getItem("huidige speler")
       localStorage -->> OefeningPage: huidige speler

       OefeningPage -> Speler: new Speler(spelernaam)

       Speler -> localStorage: getItem(naam)
       localStorage -->> Speler: data over speler
       Speler -> localStorage: setItem("huidige speler", naam)

       OefeningPage -> localStorage: getItem("selected_button")
       localStorage -->> OefeningPage: naam deelsysteem

       OefeningPage -> Speler: eindTutorialOefening(naam deelsysteem)
       Speler -> Speler: saveData()
       Speler -> localStorage: setItem(naam, data)

       OefeningPage -> MainProgram: open Main (stap 2)
       activate MainProgram
       deactivate MainProgram
    end
end



==Bitcoin-wallet==
Gebruiker -> MainProgram: klik op toepassing1
MainProgram -> Bitcoins: Open Bitcoins
activate Bitcoins

Bitcoins -> Bitcoins: init()
Bitcoins -> Matrix: new Matrix()
Bitcoins -> Matrix: getDeterminant()
Matrix -->> Bitcoins: returns determinant
Bitcoins -> Matrix: importMatrix()
Bitcoins -> Matrix: getInverse()
Matrix -->> Bitcoins: returns {determinant, adjunct, inverse}
Bitcoins -> Matrix: getDeterminant()
Matrix -->> Bitcoins: returns determinant

Bitcoins -> Bitcoins: modInverse()
Bitcoins -> Bitcoins: showAlfabet_table()



opt MMI calculator
    Gebruiker -> Bitcoins: vult determinant in
    Bitcoins -> Bitcoins: ShowMMI()
    Bitcoins -> Bitcoins: modInverse()

end

opt Start toepassing
    Gebruiker -> Bitcoins: klik op Start
    Bitcoins -> Bitcoins: startTimer()
    Bitcoins -> Bitcoins: showTime()
    opt if time = 0
        Bitcoins -> Bitcoins: showData()
        Bitcoins -> Matrix: drawMatrix()
    end
    Bitcoins -> Bitcoins: showData()
    Bitcoins -> Matrix: drawMatrix()

    opt hint
        Gebruiker -> Bitcoins: klik op hint
        Bitcoins -> Bitcoins: hint()
        opt hint_nr = 1
                Bitcoins -> Bitcoins: hint_init()
                Bitcoins -> Bitcoins: hint1()
                Bitcoins -> Matrix: new Matrix(3,1)
                Bitcoins -> Matrix: drawMatrix()
                Bitcoins -> Bitcoins: hint_uitleg()
            else hint_nr = 2
                Bitcoins -> Bitcoins: hint2()
                Bitcoins -> Matrix: drawMatrix()
            else hint_nr = 3
                Bitcoins -> Bitcoins: hint3()
            else hint_nr = 4
                Bitcoins -> Bitcoins: hint4()
                Bitcoins -> Matrix: drawMatrix()
            else hint_nr <= 4 + (matrices.length*4)
                loop voor het aantal vectoren (lengte codewoord /3)
                    opt ((hint_nr-4)%4 ===  1)
                            opt niet eerste keer loop
                                Bitcoins -> Bitcoins: terug4()
                                Bitcoins -> Matrix: drawMatrix()
                            end
                            Bitcoins -> Bitcoins: hint5(n)  (n = aantal keer loop)
                            Bitcoins -> Matrix: drawMatrix()
                        else ((hint_nr-4)%4 ===  2)
                            Bitcoins -> Bitcoins: hint6(n)
                            Bitcoins -> Matrix: new Matrix(3,1)
                            Bitcoins -> Matrix: vermenigvuldigMatrix(.)
                            Matrix -->> Bitcoins: returns [.][.]
                            Bitcoins -> Matrix: importMatrix()
                            Bitcoins -> Matrix: drawMatrix()
                        else ((hint_nr-4)%4 ===  3)
                            Bitcoins -> Bitcoins: hint7(n)
                            Bitcoins -> Matrix: copyMatrix()
                            Matrix -> Matrix: new Matrix(.,.)
                            Matrix -->> Bitcoins: returns copy
                            Bitcoins -> Matrix: drawMatrix()
                            Bitcoins -> Matrix: drawMatrix()
                        else ((hint_nr-4)%4 ===  0)
                            Bitcoins -> Bitcoins: hint8(n)
                            Bitcoins -> Matrix: new Matrix(3,1)
                            Bitcoins -> Matrix: drawMatrix()
                            Bitcoins -> Matrix: drawMatrix()
                    end
                end
            else hint_nr > 4 + (matrices.length * 4)
                Bitcoins -> Bitcoins: hint9()
        end
    end
end

opt passwoord cotroleren
    Gebruiker -> Bitcoins: vult passwoord in en drukt op "open wallet"
end


==einde programma==

deactivate MainProgram
deactivate TutorialPage
deactivate Tutorial
deactivate VermenigvuldigTutorial
deactivate OefeningPage
deactivate Oefeningen
deactivate VermenigvuldigOefening
deactivate Bitcoins
deactivate Matrix
deactivate Speler
deactivate localStorage
@enduml

